@page "/gallery"
@using Wabbajack.Web.DTO
@using Wabbajack.Web.Extensions
@using Wabbajack.Web.Services
@inject StateContainer _stateContainer;

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Large">
    <MudGrid Class="d-inline-flex flex-nowrap align-end">
        <MudItem xs="8">
            <MudCheckBox @bind-Checked="@_showNsfw" Class="mud-float-end">Show NSFW</MudCheckBox>
        </MudItem>
        <MudItem xs="4">
            <MudSelect T="string" @bind-Value="_selectedGame" Label="Game" Variant="Variant.Outlined">
                @foreach (var game in _allGames)
                {
                    <MudSelectItem Value="@game">@game</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>

    <MudGrid Class="mt-2" Spacing="2" Justify="Justify.FlexStart">
        @foreach (var modlist in FilteredList)
        {
            <MudItem xs="12" sm="12" md="6" lg="6" xl="4">
                @_renderModlistInfo(modlist)
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    public const string Route = "/gallery";
    
    private const string AllGames = "All";

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private bool _showNsfw;
    private string _selectedGame = AllGames;
    
    private IReadOnlyList<ModlistMetadata> _modlists = new List<ModlistMetadata>();
    
    private IEnumerable<ModlistMetadata> FilteredList => _modlists
        .Where(x => _showNsfw || !x.Nsfw)
        .Where(x =>
        {
            if (_selectedGame is null or AllGames) return true;
            return x.Game == _selectedGame;
        });

    private IReadOnlyList<string> _allGames = new List<string>();

    // DO NOT CHANGE "__builder"
    // ReSharper disable InconsistentNaming
    // ReSharper disable once UnusedParameter.Local
    private readonly RenderFragment<ModlistMetadata> _renderModlistInfo = modlist => __builder =>
    {
        var href = $"/modlist/{modlist.Links!.MachineUrl}";
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@modlist.Title</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <img src="@modlist.Links?.Image" alt="Image of the Modlist @modlist.Title"
                 style="width: 100%; height: auto"
                 loading="lazy" crossorigin="anonymous"/>
            <MudCardContent>
                <MudText Typo="Typo.caption">By @modlist.Author</MudText>
                <MudText Typo="Typo.body1">@modlist.Description</MudText>
                <MudDivider DividerType="DividerType.FullWidth"/>
                @if (modlist.Tags != null)
                {
                    @foreach (var tag in modlist.Tags)
                    {
                        <MudChip Size="Size.Small">@tag</MudChip>
                    }
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" ButtonType="ButtonType.Button" Color="Color.Info" Link="@href">View</MudButton>
            </MudCardActions>
        </MudCard>
    };

    protected override async Task OnInitializedAsync()
    {
        if (!_stateContainer.HasModlistMetadata)
        {
            var res = await _stateContainer.RefreshMetadata();
            //TODO: use result and show to user if failed

            if (!res) return;
        }

        _modlists = _stateContainer.Modlists;

        var allGames = _modlists
            .Select(x => x.Game)
            .NotNull()
            .Distinct()
            .OrderBy(x => x, StringComparer.OrdinalIgnoreCase)
            .ToList();
        
        allGames.Insert(0, AllGames);
        
        _allGames = allGames;
        _showNsfw = false;

        _shouldRender = true;
    }
}